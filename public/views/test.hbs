<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Test Page</title>
    <link rel="stylesheet" href="./css/jquery.gridster.css" />
    <link rel="stylesheet" href="./css/react-grid.css" />
    <script type="text/javascript" src="./js/jquery.js"></script>
    <script type="text/javascript" src="./js/jquery.gridster.js"></script>

  </head>
  <body>
    <div id="app"></div>
    <script type="text/javascript" src="./js/bundle.js"></script>

    <script type="text/javascript">
        var test = [
          {{#each this}}
              {{#each content}}
                  {{#if dataNameJSON}}
                        {{#each dataNameJSON}}
                            {{#each this}}
                                {{#unless @last}}
                                    {{#each this}}
                                      ['<li>{{name}}</li>', {{width}}, {{height}}, {{col}}, {{row}}],
                                      {{/each}}
                                    {{else}}
                                    {{#each this}}
                                      ['<li>{{name}}</li>', {{width}}, {{height}}, {{col}}, {{row}}]
                                    {{/each}}
                                {{/unless}}
                            {{/each}}
                        {{/each}}
                  {{/if}}
              {{/each}}
          {{/each}}
        ]

        var local = [
          {{#each this}}
              {{#ifCond name "==" "local"}}
                {{#each content}}
                  {{#unless @last}}
                    ["<li data-component='{{name}}' class='add-component'>{{name}}</li>", 1, 1],
                  {{else}}
                    ["<li class='add-component'>{{name}}</li>", 1, 1]
                  {{/unless}}
                {{/each}}
              {{/ifCond}}
          {{/each}}
        ]
    </script>

    <section class="demo">
      <div class="gridster-local gridster-styles">
        <ul></ul>
      </div>

      <select class="page-to-add" name="page-to-add">
        <option></option>
        {{#each this}}
            {{#ifCond name "==" "pages"}}
                {{#each content}}
                      <option value="{{name}}">{{name}}-{{dataName}}</option>
                {{/each}}
            {{/ifCond}}
        {{/each}}
      </select>
    </section>

    {{#each this}}
      <h1>{{this.name}}</h1>
      <ul>
        {{#each content}}
          <li data-module='{{repository}}'>
              <div>{{name}}-{{dataName}}</div>
              {{#if dataNameJSON}}
                  <section class="demo">
                      <div class="gridster-page gridster-styles">
                          <ul></ul>
                      </div>
                      <input type="button" name="save-modules" class="save-modules" value="Save Modules">
                  </section>
                  <div>
                      <textarea id="data-json-string" name="name" rows="8" cols="40">
                        {{dataStringJSON}}
                      </textarea>
                      <input type="button" name="name" value="Save JSON" id="save">
                  </div>
              {{/if}}
          </li>
        {{/each}}
      </ul>
    {{/each}}



    <script type="text/javascript">
      var construction = {
        init:function() {
          this.gridsterInit();
          this.attachHandlers();
        },

        component: {
            buildNew : function(componentSet) {
              //debugger;
              var newComponents = {
                components: []
              };

              $.each(test, function(index, val) {
                var component = jQuery(componentSet[index][0]).html();
                //debugger;
                var X = componentSet[index][1];
                var Y = componentSet[index][2];
                var Row = componentSet[index][4];
                var Col = componentSet[index][3];
                var componentObj = {
                  "component" : {
                      name: component,
                      width: X,
                      height: Y,
                      col: Col,
                      row: Row
                  }
                }
                newComponents.components.push(componentObj);
              })

              newComponents = JSON.stringify(newComponents);
              return newComponents;

            },

            updateModules : function(updatedComponents) {
              $.ajax({
                url: "/updateModules/" + "testingPage.json",
                method: "POST",
                data: updatedComponents,
                contentType: "application/json"
              }).done(function(data) {
                console.log( "Data Loaded: " + data );
              });
            },

            updateComponentOrder : function(components, widgets) {
              for(var i = 0; i < components.length; i++) {
                debugger;
                var rowUpdate = parseInt($(widgets[i]).attr("data-row"));
                var colUpdate = parseInt($(widgets[i]).attr("data-col"));
                console.log(components[i][4])
                console.log(rowUpdate)
                components[i][4] = rowUpdate;
                components[i][3] = colUpdate;
                delete rowUpdate;
                delete colUpdate;
              }

              return components;
            }

        },

        attachHandlers : function() {
          var _save = $("#save");
          var _addComponent = $(".add-component");
          var _saveModules = $(".save-modules");

          _save.on("click", function() {
            var jsonString = document.getElementById("data-json-string");
            var postJSON = jsonString.value;
            construction.component.updateModules(postJSON);
          })

          _addComponent.each(function() {
            $(this).on("click", function() {
              //If any local module is clicked then get the data for that module
              var component = "<li>" + $(this).attr("data-component") + "</li>";
              debugger;
              var X = $(this).attr("data-sizex");
              var Y = $(this).attr("data-sizey");

              //Build a small array and push it into the page's global modules object
              //To Implement: test will not give the correct flexility, this will need to change to the page the action is being performed on
              test.push([component, X, Y])

              //Add the new component to the grid separately.
              //Question: Should the state of the page's components object directly reflect the state of the page. I.e. can we bind the data model to the grid
              construction.pageGridster(component);
            })
          })

          _saveModules.on("click", function() {
            //Build components based on the page's available components. Output object as string representation.
            //To Implement: Test should be changed to correct page's data
            debugger;
            var components = construction.component.buildNew(test);

            //Post updated components to file
            //To Implement: File is currently hardcoded
            construction.component.updateModules(components);
          })
        },

        gridsterInit : function() {
          this.pageGridster(test);
          this.localGridster();
        },

        localGridster : function() {
          var localGridster = $(".gridster-local > ul").gridster({
                  widget_margins: [10, 10],
                  widget_base_dimensions: [140, 140],
                  min_cols: 6,
                  resize: {
                      enabled: true
                  }
          }).data('gridster');

          $.each(local, function(i, widget){
              localGridster.add_widget.apply(localGridster, widget)
          });
        },

        pageGridster : function(gridsterData) {
          //debugger;
          var gridster = $(".gridster-page > ul").gridster({
                  widget_margins: [10, 10],
                  widget_base_dimensions: [140, 140],
                  min_cols: 12,
                  max_cols:12,
                  serialize_params: function($w, wgd) {
                    return {
                         /* add element ID to data*/
                         id: $w.attr('id'),
                         /* defaults */
                         col: wgd.col,
                         row: wgd.row,
                         size_x: wgd.size_x,
                         size_y: wgd.size_y
                     }
                  },
                  draggable: {
                      stop: function(e, ui, $widget) {


                        console.log(e);
                        console.log(ui);
                        console.log($widget);

                        //var arrItem = $(this.$widgets).siblings(".player-revert").prevAll().length;
                        //arrItem = test[arrItem];
                        //var Row = $(this.$widgets).siblings(".player-revert").data("row");
                        //arrItem[4] = Row;
                        debugger;


                        /*$(this.$widgets).each(function(i, val) {
                          debugger;
                        })

                        $(this.$widgets).each(function(i, val) {
                          var whatRow = $(this).data("row");
                          console.log(test[i])
                          console.log(whatRow)
                          test[i][4] = whatRow;
                        })*/
                        /*for(var i = 0; i < test.length; i++) {
                          console.log(test[i][4])
                          console.log(i+1)
                          test[i][4] = i + 1;
                        }*/
                        debugger;
                        construction.component.updateComponentOrder(test, this.$widgets);

                      }
                  },
                  resize: {
                      enabled: true,
                          start: function(e, ui, $widget) {
                            //log.innerHTML = 'START position: ' + ui.position.top +' '+ ui.position.left + "<br >" + log.innerHTML;
                          },

                          resize: function(e, ui, $widget) {
                            //log.innerHTML = 'RESIZE offset: ' + ui.pointer.diff_top +' '+ ui.pointer.diff_left + "<br >" + log.innerHTML;
                          },

                          stop: function(e, ui, $widget) {
                            //log.innerHTML = 'STOP position: ' + ui.position.top +' '+ ui.position.left + "<br >" + log.innerHTML;
                            console.log(e);
                            console.log(ui);
                            console.log($widget);
                            debugger;
                            construction.component.updateComponentOrder(test, this.$widgets);
                            var arrItem = $widget.prevAll().length;
                            arrItem = test[arrItem];
                            var X = parseInt($widget.attr("data-sizex"));
                            var Y = parseInt($widget.attr("data-sizey"));
                            arrItem[1] = X;
                            arrItem[2] = Y;


                          }
                  }
          }).data('gridster');

          if(typeof(gridsterData) === "object") {
            $.each(gridsterData, function(i, widget){
               //debugger;
               gridster.add_widget.apply(gridster, widget)
            });
          } else {
            gridster.add_widget.apply(gridster, [gridsterData, 1, 1])

          }

        }

      }


      jQuery(document).ready(function($) {
        construction.init();
      })
    </script>




  </body>
</html>
